{"version":3,"sources":["Constants.ts","Places.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src/google","sourcesContent":["export const GOOGLE_PLACES_API = \"https://maps.googleapis.com/maps/api/place/\";\n\nexport const PlaceTypes = {\n  ADDRESS: \"address\",\n  ADMINISTRATIVE_AREA_LEVEL_1: \"administrative_area_level_1\",\n  ADMINISTRATIVE_AREA_LEVEL_2: \"administrative_area_level_2\",\n  CITIES: \"(cities)\",\n  COUNTRY: \"country\",\n  ESTABLISHMENT: \"establishment\",\n  GEOCODE: \"geocode\",\n  LOCALITY: \"locality\",\n  POSTAL_CODE: \"postal_code\",\n  REGIONS: \"(regions)\",\n  SUBLOCALITY: \"sublocality\"\n};\n\nexport interface GoogleMapsApiOptions {\n  readonly optionalKeys: string[];\n  readonly requiredKeys: string[];\n  readonly path: string;\n}\n\ninterface ApiMap {\n  readonly [key: string]: GoogleMapsApiOptions;\n}\n\nexport const API: ApiMap = {\n  AUTOCOMPLETE: {\n    optionalKeys: [\n      \"offset\",\n      \"location\",\n      \"radius\",\n      \"language\",\n      \"types\",\n      \"strictbounds\",\n      \"components\",\n      \"sessiontoken\"\n    ],\n    path: \"autocomplete\",\n    requiredKeys: [\"input\"]\n  },\n  DETAILS: {\n    optionalKeys: [\"language\", \"sessiontoken\"],\n    path: \"details\",\n    requiredKeys: [\"placeid\"]\n  },\n  NEARBY_SEARCH: {\n    optionalKeys: [\n      \"radius\",\n      \"keyword\",\n      \"language\",\n      \"minprice\",\n      \"maxprice\",\n      \"name\",\n      \"opennow\",\n      \"rankby\",\n      \"type\",\n      \"pagetoken\",\n      \"region\"\n    ],\n    path: \"nearbysearch\",\n    requiredKeys: [\"location\"]\n  },\n  RADAR_SEARCH: {\n    optionalKeys: [\n      \"keyword\",\n      \"language\",\n      \"minprice\",\n      \"maxprice\",\n      \"name\",\n      \"opennow\",\n      \"type\"\n    ],\n    path: \"radarsearch\",\n    requiredKeys: [\"location\", \"radius\"]\n  },\n  TEXT_SEARCH: {\n    optionalKeys: [\n      \"location\",\n      \"radius\",\n      \"language\",\n      \"minprice\",\n      \"maxprice\",\n      \"opennow\",\n      \"pagetoken\",\n      \"type\"\n    ],\n    path: \"textsearch\",\n    requiredKeys: [\"query\"]\n  }\n};\n","import * as superagent from \"superagent\";\nimport { API } from \"./Constants\";\n\nconst GOOGLE_MAPS_API_TARGET = \"https://maps.googleapis.com/maps/api/place\";\n\ninterface IGooglePlacesConfig {\n  apiKey?: string;\n  debug: boolean;\n}\n\nexport interface GooglePlacesOptions {\n  [key: string]: any;\n}\n\nexport class GooglePlaces {\n  private _apiKey?: string;\n  private _debug: boolean = false;\n\n  constructor(opts: IGooglePlacesConfig = { debug: false }) {\n    const { apiKey, debug } = opts;\n    this.apiKey = apiKey;\n    this.debug = debug;\n  }\n\n  /**\n   * Retrieves a list of predictions of a partial address\n   */\n  public autocomplete(opts: GooglePlacesOptions): Promise<any> {\n    const params = this._permitParams(API.AUTOCOMPLETE, opts);\n    return this._query(API.AUTOCOMPLETE.path, params).then(\n      (res: any) => res.predictions\n    );\n  }\n\n  /**\n   * Retrieve the details of a Google Place based on the Place ID\n   */\n  public details(opts: GooglePlacesOptions) {\n    const params = this._permitParams(API.DETAILS, opts);\n    return this._query(API.DETAILS.path, params).then(\n      (json: any) => json.result\n    );\n  }\n\n  /**\n   * Google API Nearby Search\n   */\n  public nearbysearch(opts: GooglePlacesOptions = {}): Promise<any> {\n    const params = this._permitParams(API.NEARBY_SEARCH, opts);\n    return this._query(API.NEARBY_SEARCH.path, params).then(\n      (res: any) => res.results\n    );\n  }\n\n  /**\n   * Google API Text Search\n   */\n  public textsearch(opts: GooglePlacesOptions = {}): Promise<any> {\n    const params = this._permitParams(API.TEXT_SEARCH, opts);\n\n    return this._query(API.TEXT_SEARCH.path, params).then(\n      (res: any) => res.results\n    );\n  }\n\n  /**\n   * Google API Radar Search\n   */\n  public radarsearch(opts: GooglePlacesOptions = {}): Promise<any> {\n    const params: any = this._permitParams(API.RADAR_SEARCH, opts);\n\n    if (!params.name && !params.keyword && !params.type) {\n      throw new Error(\"Missing required parameter: [keyword, name, or type]\");\n    }\n\n    return this._query(API.RADAR_SEARCH.path, params).then(\n      (res: any) => res.results\n    );\n  }\n\n  /**\n   * Set the Google API Key from the Developer Console\n   */\n  set apiKey(apiKey: string | undefined) {\n    if (apiKey && (typeof apiKey !== \"string\" || !apiKey.match(/^[^\\s]+$/gi))) {\n      throw new Error(\"Invalid API Key\");\n    }\n\n    this._apiKey = apiKey;\n  }\n\n  get apiKey(): string | undefined {\n    return this._apiKey;\n  }\n\n  /**\n   * Set debugging mode which will log events\n   * @param {boolean} isDebug true or false to enable debug mode\n   */\n  set debug(isDebug: boolean) {\n    this._debug = isDebug;\n  }\n\n  private _googleApiRequest(url: string, params: object) {\n    const target = `${GOOGLE_MAPS_API_TARGET}${url}`;\n    this._log(`GPW:REQ ${target}`, JSON.stringify({ ...params }));\n    return superagent.get(target).query({ key: this.apiKey, ...params });\n  }\n\n  /**\n   * Parse through a params object creating URI Components\n   */\n  private _permitParams(\n    {\n      requiredKeys,\n      optionalKeys\n    }: { requiredKeys: string[]; optionalKeys: string[] },\n    params: any\n  ): object {\n    // Validate required keys are present\n    if (!requiredKeys || !requiredKeys.length) {\n      throw new Error(\"No required params defined\");\n    } else if (!params) {\n      throw new Error(\"No parameters provided\");\n    }\n\n    const missingKeys: string[] = [];\n\n    // Filter required params\n    const filteredRequiredParams = requiredKeys.reduce(\n      (p: any, key: string) => {\n        const param: string = params[key];\n        if (param) {\n          p[key] = param;\n        } else {\n          missingKeys.push(key);\n        }\n        return p;\n      },\n      {}\n    );\n\n    if (missingKeys.length) {\n      throw new Error(`Missing required params: [${missingKeys.join(\", \")}]`);\n    }\n\n    // Filter optional params\n    const filteredOptionalParams = optionalKeys.reduce(\n      (p: any, key: string) => {\n        const param = params[key];\n        if (param) {\n          p[key] = param;\n        }\n        return p;\n      },\n      {}\n    );\n\n    this._log(\"GPW:PARAMS\", JSON.stringify(params));\n    return { ...filteredOptionalParams, ...filteredRequiredParams };\n  }\n\n  /**\n   * Logs messages based on the _debug\n   */\n  private _log(title: string, message: any): void {\n    if (this._debug) {\n      // tslint:disable-next-line\n      console.log(title, message);\n    }\n  }\n\n  /**\n   * Performs the HTTP Request\n   */\n  private async _query(path: string, params: object): Promise<any> {\n    if (!this._apiKey) {\n      throw new Error(\"Invalid API key\");\n    } else if (!path) {\n      throw new Error(\"Google API path is required\");\n    } else if (!params) {\n      throw new Error(\"Missing params\");\n    }\n\n    try {\n      const response: superagent.Response = await this._googleApiRequest(\n        `/${path}/json`,\n        params\n      );\n      const { body } = response;\n      this._log(\"GPW:RES\", body);\n      if (body.status !== \"OK\") {\n        throw new Error(body.status);\n      }\n      return body;\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport default new GooglePlaces();\n","import Places, { GooglePlaces } from \"./Places\";\nexport { GOOGLE_PLACES_API, API } from \"./Constants\";\nexport { GooglePlaces };\nexport default Places;\n"]}